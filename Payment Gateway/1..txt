Integrate paymeant_gateway_system in our e-commerece_website when checkout process.
Using Khalti payment gateway.(One of the most popular payment gateway in nepal that provides us the credentials when we signup as a merchant account)


Before Gateway integration when ordering process is in checkout process:

#In models.py :
1.
PAYMENT_METHOD = (
    ("Cash on delivery", "Cash on delivery"),
    ("Khalti", "Khalti"),
    ("Esewa", "Esewa"),
    ("PayPal", "PayPal"),
)

class Order(models.Model):
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHOD, default="Cash on delivery")
    payment_done = models.BooleanField(default=False, null=True, blank=True)


# In forms.py
2.
class CheckOutForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ["order_by", "shipping_address", "mobile", "email", "payment_method"]


#In views.py in CheckOut class:
3.
class Checkout(EcomMixin, CreateView):
    template_name = "checkout.html"
    form_class = CheckOutForm
    success_url = reverse_lazy("home")

    def dispatch(self, request, *args, **kwargs):

    def get_context_data(self, **kwargs):

    def form_valid(self, form):
            del self.request.session['cart_id'] ************************after this line
            payment_method = form.cleaned_data.get("payment_method")
            # print(payment_method)
            order_obj = form.save()
            if payment_method == "Khalti":
                return redirect(reverse("khalti_request") + "?order_id=" + str(order_obj.id))


1. Go to khalti.com and create a Merchant_Account then log in.
2. Go to documentation (https://docs.khalti.com/?csrt=8428875492437473001)


# Client_Integration:
3. Client Integration / Web SDK(Since we are making web apllication we have to use Web SDK in client integration.)
4. Make new template(khalti_request.html) and copy-paste code i.e (Install Without build tools)

# In urls.py: (make url pattern to route into (khalti_request.html) page )
5.  path('khalti_request/', KhaltiRequest.as_view(), name="khalti_request"),


# In views.py:
6. 
class KhaltiRequest(View): # view that will initiate the payment process

    def get(self, request, *args, **kwargs):
        context = {}
        return render(request, "khaliti_request.html", context)


7. # pass created order_object into khalti_request.html
from django.urls import  reverse
class KhaltiRequest(View): # view that will initiate the payment process 
    def get(self, request, *args, **kwargs):
        order_id = request.GET.get("order_id")
        order_obj = Order.objects.get(id=order_id)
        context = {"order_obj":order_obj}
        return render(request, "khalti_request.html", context)

Here, Client side integration is finished.


*******************************************************************************************

Now Server side integration. for serververification
Verification is required to complete the transaction.
Verification should be done from our server side i.e backend
 

# Server_Integration: 

1.
#In urls.py:

path('khalti_verify/', KhaltiVerify.as_view(), name="khalti_verify"), #varification url


2.
In views.py:
# view that will verify the payment process(avoid illigel activity)
# view that will return JSON_response instead of html_page.

from django.http import JsonResponse
class KhaltiVerify(View):  
    def get(self, request, *args, **kwargs): 
        data = {}
        return JsonResponse(data)


3.
In khalti_request.html:
"publicKey": "test_public_key_8880ae87109c4555af739ba5b14cc251", #change public key
"productIdentity": "order_{{order_obj.id}}", #change product identity
"productName": "order_{{order_obj.id}}", #change product name
"productUrl": "http://localhost:8000", #change product Url

Here, order_obj is order_object passed from class KhaltiRequest(View)

i.e :
In khalti_request.html:
<script>
        var config = {
            // replace the publicKey with yours
            "publicKey": "test_public_key_8880ae87109c4555af739ba5b14cc251",
            "productIdentity": "order_{{order_obj.id}}",
            "productName": "order_{{order_obj.id}}",
            "productUrl": "http://localhost:8000",
	    *
	    *
	    *
	    *
		     }
</script>


Here when you pay you can see Object containg all the information required for verification in page console

user account pays to Merchat account
When user pays you can see Object in console and this information is required to verify your trnasaction.

Now when you pay from kahlti this JSONResponse appears in console :


console.log(payload) gives ===>
{idx: 'Ua4hmgWiHT6rpNYkQVwqzE', token: 'dWkjrwBEHTQPzHqErryK8P', amount: 18000, mobile: '98XXXXX056', product_identity: 'order_58', …}
amount: 18000
idx: "Ua4hmgWiHT6rpNYkQVwqzE"
mobile: "98XXXXX056"
product_identity: "order_58"
product_name: "order_58"
product_url: "http://localhost:8000"
token: "dWkjrwBEHTQPzHqErryK8P"
widget_id: "khalti-widget-1631291936914"


console.log(resp) gives ===>
{data: {…}, status: 200, statusText: 'OK', headers: {…}, config: {…}, …}
config: {url: '/khalti_verify/', method: 'get', headers: {…}, params: {…}, transformRequest: Array(1), …}
data: {success_key: true}
headers: {content-length: '21', content-type: 'application/json', date: 'Fri, 10 Sep 2021 16:39:23 GMT', referrer-policy: 'same-origin', server: 'WSGIServer/0.2 CPython/3.9.4', …}
request: XMLHttpRequest {onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
status: 200
statusText: "OK"




console.log(resp.data) gives ===>
{success_key: true}
success_key: true
[[Prototype]]: Object







Verification request:
To verify the transaction you need to send POST_request(method: POST) to backend (this url:https://khalti.com/api/v2/payment/verify/), with header("Authorization":Secret_Key ) and payload(token&amount).
i.e
url = "https://khalti.com/api/v2/payment/verify/"
payload = {
            "token": token,
            "amount": amount
        }
headers = {
            "Authorization": "Key test_secret_key_cf7256d62bfe461d8fcab8209e020766"
        }


In code editor terminal :

print(token, amount) ==> gives ==> JzwJtGTRnJHpAGXehTsasP 18000
print(response) ==> gives ==> <Response [200]>
print(response_obj_dict) ==> gives ==> {'idx': 'DtE8FQKXZ6CEBzHHQ4K9mJ', 'type': {'idx': '2jwzDS9wkxbkDFquJqfAEC', 'name': 'Wallet payment'}, 'state': {'idx': 'DhvMj9hdRufLqkP8ZY4d8g', 'name': 'Completed', 'template': 'is complete'}, 'amount': 18000, 'fee_amount': 540, 'reference': None, 'refunded': False, 'created_on': '2021-09-10T22:28:03.583544+05:45', 'user': {'idx': '', 'name': 'Amir Shrestha (9869666056)'}, 'merchant': {'idx': 'LyZc4B9CJoCnz2BbYHpNHF', 'name': 'Texas College of Management and IT', 'mobile': 'simbaamir55@gmail.com', 'email': 'simbaamir55@gmail.com'}, 'remarks': None, 'token': 'JzwJtGTRnJHpAGXehTsasP', 'cashback': 0}




//axios help to confirm/verify if payment is succesfull
axios.get("/khalti_verify/", { 
                        params: {
                            "token": payload.token,
                            "amount": payload.amount,
                            "order_id": "{{order_obj.id}}",
                        } //if we send these information then this will return response
                    }).then(function(resp){
                        //console.log(resp)   //{data: {…}, status: 200, statusText: 'OK', headers: {…}, config: {…}, …}
                        //console.log(resp.data) //hold JSON data   //{success_key: true}
                        if(resp.data.success_key == true){
                            alert("Thanks, Paymrnt Completed Succesfully !")
                            location.href = "/"
                        }else{
                            alert("Sorry, Error occured while payment !")
                            location.href = "{{ request.build_absolute_uri }}"
                        }
                    })



Now:

url = "https://khalti.com/api/v2/payment/verify/"
        payload = {
            "token": token,
            "amount": amount
        }
        # print(token, amount)
        headers = {
            "Authorization": "Key test_secret_key_cf7256d62bfe461d8fcab8209e020766"
        }

        order_obj = Order.objects.get(id=order_id)

        response = requests.post(url, payload, headers = headers)
        # print(response)

        response_obj_dict = response.json()
        # print(response_obj_dict)

        if response_obj_dict.get("idx"):
            success = True
            order_obj.payment_done = True
            order_obj.save()
        else:
            success = False

        data = {
            "success_key": success
        }
        return JsonResponse(data)